// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: innerMsg.proto

/*
	Package innerMsg is a generated protocol buffer package.

	It is generated from these files:
		innerMsg.proto

	It has these top-level messages:
		PacketTransport
		ClientConnect
		PlayerConnect
		CloseSession
		ServerUpdate
		ServerInfoBroad
*/
package innerMsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InnerCmd int32

const (
	InnerCmd_c             InnerCmd = 0
	InnerCmd_transport     InnerCmd = 100
	InnerCmd_serverUpdate  InnerCmd = 101
	InnerCmd_serverBroad   InnerCmd = 102
	InnerCmd_clientConnect InnerCmd = 103
	InnerCmd_closeSession  InnerCmd = 104
	InnerCmd_serverConnect InnerCmd = 105
	InnerCmd_broadMsg      InnerCmd = 106
)

var InnerCmd_name = map[int32]string{
	0:   "c",
	100: "transport",
	101: "serverUpdate",
	102: "serverBroad",
	103: "clientConnect",
	104: "closeSession",
	105: "serverConnect",
	106: "broadMsg",
}
var InnerCmd_value = map[string]int32{
	"c":             0,
	"transport":     100,
	"serverUpdate":  101,
	"serverBroad":   102,
	"clientConnect": 103,
	"closeSession":  104,
	"serverConnect": 105,
	"broadMsg":      106,
}

func (x InnerCmd) String() string {
	return proto.EnumName(InnerCmd_name, int32(x))
}
func (InnerCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{0} }

type ConnectType int32

const (
	ConnectType_Client ConnectType = 0
	ConnectType_Server ConnectType = 1
)

var ConnectType_name = map[int32]string{
	0: "Client",
	1: "Server",
}
var ConnectType_value = map[string]int32{
	"Client": 0,
	"Server": 1,
}

func (x ConnectType) String() string {
	return proto.EnumName(ConnectType_name, int32(x))
}
func (ConnectType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{1} }

type ConnectState int32

const (
	ConnectState_alive ConnectState = 0
	ConnectState_dead  ConnectState = 1
)

var ConnectState_name = map[int32]string{
	0: "alive",
	1: "dead",
}
var ConnectState_value = map[string]int32{
	"alive": 0,
	"dead":  1,
}

func (x ConnectState) String() string {
	return proto.EnumName(ConnectState_name, int32(x))
}
func (ConnectState) EnumDescriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{2} }

type PacketTransport struct {
	Target uint64 `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
	Cmd    int32  `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PacketTransport) Reset()                    { *m = PacketTransport{} }
func (m *PacketTransport) String() string            { return proto.CompactTextString(m) }
func (*PacketTransport) ProtoMessage()               {}
func (*PacketTransport) Descriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{0} }

func (m *PacketTransport) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *PacketTransport) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *PacketTransport) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ClientConnect struct {
	Id    uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind  ConnectType  `protobuf:"varint,2,opt,name=kind,proto3,enum=ConnectType" json:"kind,omitempty"`
	State ConnectState `protobuf:"varint,3,opt,name=state,proto3,enum=ConnectState" json:"state,omitempty"`
}

func (m *ClientConnect) Reset()                    { *m = ClientConnect{} }
func (m *ClientConnect) String() string            { return proto.CompactTextString(m) }
func (*ClientConnect) ProtoMessage()               {}
func (*ClientConnect) Descriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{1} }

func (m *ClientConnect) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClientConnect) GetKind() ConnectType {
	if m != nil {
		return m.Kind
	}
	return ConnectType_Client
}

func (m *ClientConnect) GetState() ConnectState {
	if m != nil {
		return m.State
	}
	return ConnectState_alive
}

type PlayerConnect struct {
	Uid  uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Kind uint32 `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *PlayerConnect) Reset()                    { *m = PlayerConnect{} }
func (m *PlayerConnect) String() string            { return proto.CompactTextString(m) }
func (*PlayerConnect) ProtoMessage()               {}
func (*PlayerConnect) Descriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{2} }

func (m *PlayerConnect) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerConnect) GetKind() uint32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

type CloseSession struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CloseSession) Reset()                    { *m = CloseSession{} }
func (m *CloseSession) String() string            { return proto.CompactTextString(m) }
func (*CloseSession) ProtoMessage()               {}
func (*CloseSession) Descriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{3} }

func (m *CloseSession) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ServerUpdate struct {
	SID   uint64 `protobuf:"varint,1,opt,name=sID,proto3" json:"sID,omitempty"`
	Load  uint32 `protobuf:"varint,2,opt,name=load,proto3" json:"load,omitempty"`
	State uint32 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Info  []byte `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *ServerUpdate) Reset()                    { *m = ServerUpdate{} }
func (m *ServerUpdate) String() string            { return proto.CompactTextString(m) }
func (*ServerUpdate) ProtoMessage()               {}
func (*ServerUpdate) Descriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{4} }

func (m *ServerUpdate) GetSID() uint64 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *ServerUpdate) GetLoad() uint32 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *ServerUpdate) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ServerUpdate) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type ServerInfoBroad struct {
	List []*ServerInfoBroad_ServerInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ServerInfoBroad) Reset()                    { *m = ServerInfoBroad{} }
func (m *ServerInfoBroad) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoBroad) ProtoMessage()               {}
func (*ServerInfoBroad) Descriptor() ([]byte, []int) { return fileDescriptorInnerMsg, []int{5} }

func (m *ServerInfoBroad) GetList() []*ServerInfoBroad_ServerInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ServerInfoBroad_ServerInfo struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State    uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Addr     string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Protocol string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Node     uint64 `protobuf:"varint,5,opt,name=node,proto3" json:"node,omitempty"`
	Load     uint32 `protobuf:"varint,6,opt,name=load,proto3" json:"load,omitempty"`
}

func (m *ServerInfoBroad_ServerInfo) Reset()         { *m = ServerInfoBroad_ServerInfo{} }
func (m *ServerInfoBroad_ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfoBroad_ServerInfo) ProtoMessage()    {}
func (*ServerInfoBroad_ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorInnerMsg, []int{5, 0}
}

func (m *ServerInfoBroad_ServerInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServerInfoBroad_ServerInfo) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ServerInfoBroad_ServerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ServerInfoBroad_ServerInfo) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ServerInfoBroad_ServerInfo) GetNode() uint64 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *ServerInfoBroad_ServerInfo) GetLoad() uint32 {
	if m != nil {
		return m.Load
	}
	return 0
}

func init() {
	proto.RegisterType((*PacketTransport)(nil), "PacketTransport")
	proto.RegisterType((*ClientConnect)(nil), "ClientConnect")
	proto.RegisterType((*PlayerConnect)(nil), "PlayerConnect")
	proto.RegisterType((*CloseSession)(nil), "CloseSession")
	proto.RegisterType((*ServerUpdate)(nil), "ServerUpdate")
	proto.RegisterType((*ServerInfoBroad)(nil), "ServerInfoBroad")
	proto.RegisterType((*ServerInfoBroad_ServerInfo)(nil), "ServerInfoBroad.ServerInfo")
	proto.RegisterEnum("InnerCmd", InnerCmd_name, InnerCmd_value)
	proto.RegisterEnum("ConnectType", ConnectType_name, ConnectType_value)
	proto.RegisterEnum("ConnectState", ConnectState_name, ConnectState_value)
}
func (m *PacketTransport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketTransport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Target != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Target))
	}
	if m.Cmd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Cmd))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *ClientConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Id))
	}
	if m.Kind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Kind))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *PlayerConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerConnect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Uid))
	}
	if m.Kind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Kind))
	}
	return i, nil
}

func (m *CloseSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSession) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ServerUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.SID))
	}
	if m.Load != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Load))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.State))
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *ServerInfoBroad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoBroad) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInnerMsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServerInfoBroad_ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfoBroad_ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.State))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if m.Node != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Node))
	}
	if m.Load != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInnerMsg(dAtA, i, uint64(m.Load))
	}
	return i, nil
}

func encodeFixed64InnerMsg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32InnerMsg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInnerMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PacketTransport) Name() string {
	return "PacketTransport"
}

func (m *ClientConnect) Name() string {
	return "ClientConnect"
}

func (m *PlayerConnect) Name() string {
	return "PlayerConnect"
}

func (m *CloseSession) Name() string {
	return "CloseSession"
}

func (m *ServerUpdate) Name() string {
	return "ServerUpdate"
}

func (m *ServerInfoBroad) Name() string {
	return "ServerInfoBroad"
}

func (m *ServerInfoBroad_ServerInfo) Name() string {
	return "ServerInfo"
}

func (m *PacketTransport) Size() (n int) {
	var l int
	_ = l
	if m.Target != 0 {
		n += 1 + sovInnerMsg(uint64(m.Target))
	}
	if m.Cmd != 0 {
		n += 1 + sovInnerMsg(uint64(m.Cmd))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInnerMsg(uint64(l))
	}
	return n
}

func (m *ClientConnect) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInnerMsg(uint64(m.Id))
	}
	if m.Kind != 0 {
		n += 1 + sovInnerMsg(uint64(m.Kind))
	}
	if m.State != 0 {
		n += 1 + sovInnerMsg(uint64(m.State))
	}
	return n
}

func (m *PlayerConnect) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovInnerMsg(uint64(m.Uid))
	}
	if m.Kind != 0 {
		n += 1 + sovInnerMsg(uint64(m.Kind))
	}
	return n
}

func (m *CloseSession) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInnerMsg(uint64(m.Id))
	}
	return n
}

func (m *ServerUpdate) Size() (n int) {
	var l int
	_ = l
	if m.SID != 0 {
		n += 1 + sovInnerMsg(uint64(m.SID))
	}
	if m.Load != 0 {
		n += 1 + sovInnerMsg(uint64(m.Load))
	}
	if m.State != 0 {
		n += 1 + sovInnerMsg(uint64(m.State))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovInnerMsg(uint64(l))
	}
	return n
}

func (m *ServerInfoBroad) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovInnerMsg(uint64(l))
		}
	}
	return n
}

func (m *ServerInfoBroad_ServerInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovInnerMsg(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovInnerMsg(uint64(m.State))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovInnerMsg(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovInnerMsg(uint64(l))
	}
	if m.Node != 0 {
		n += 1 + sovInnerMsg(uint64(m.Node))
	}
	if m.Load != 0 {
		n += 1 + sovInnerMsg(uint64(m.Load))
	}
	return n
}

func sovInnerMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInnerMsg(x uint64) (n int) {
	return sovInnerMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketTransport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketTransport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketTransport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInnerMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (ConnectType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ConnectState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SID", wireType)
			}
			m.SID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInnerMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info[:0], dAtA[iNdEx:postIndex]...)
			if m.Info == nil {
				m.Info = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoBroad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfoBroad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfoBroad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInnerMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ServerInfoBroad_ServerInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfoBroad_ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInnerMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInnerMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			m.Node = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Node |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInnerMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInnerMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInnerMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInnerMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInnerMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInnerMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInnerMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInnerMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInnerMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInnerMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("innerMsg.proto", fileDescriptorInnerMsg) }

var fileDescriptorInnerMsg = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xae, 0xdb, 0xa4, 0x6a, 0xff, 0x25, 0xad, 0xb1, 0x26, 0x14, 0x0d, 0x29, 0x54, 0x99, 0x90,
	0xaa, 0x1e, 0x8a, 0x54, 0xc4, 0x0b, 0xac, 0xbb, 0xf4, 0x30, 0x31, 0xa5, 0xe3, 0x8a, 0xe4, 0xc5,
	0x6e, 0x31, 0xcb, 0xec, 0xca, 0x36, 0x93, 0xf6, 0x08, 0x70, 0xe2, 0x15, 0x78, 0x1b, 0x6e, 0xf0,
	0x08, 0xa8, 0xbc, 0x04, 0x47, 0x64, 0xa7, 0xc9, 0xa2, 0x72, 0xfb, 0x6c, 0x7f, 0xfe, 0xfe, 0xcf,
	0x9f, 0x3f, 0x18, 0x09, 0x29, 0xb9, 0xbe, 0x32, 0xdb, 0xf9, 0x4e, 0x2b, 0xab, 0xb2, 0x77, 0x30,
	0xbe, 0xa6, 0xc5, 0x1d, 0xb7, 0x37, 0x9a, 0x4a, 0xb3, 0x53, 0xda, 0x92, 0xe7, 0xd0, 0xb7, 0x54,
	0x6f, 0xb9, 0x4d, 0xd0, 0x04, 0x4d, 0x83, 0xfc, 0xb0, 0x22, 0x18, 0x7a, 0xc5, 0x3d, 0x4b, 0xba,
	0x13, 0x34, 0x0d, 0x73, 0x07, 0x09, 0x81, 0x80, 0x51, 0x4b, 0x93, 0xde, 0x04, 0x4d, 0xa3, 0xdc,
	0xe3, 0x6c, 0x03, 0xf1, 0xb2, 0x14, 0x5c, 0xda, 0xa5, 0x92, 0x92, 0x17, 0x96, 0x8c, 0xa0, 0x2b,
	0xd8, 0x41, 0xaa, 0x2b, 0x18, 0x99, 0x40, 0x70, 0x27, 0x64, 0xa5, 0x33, 0x5a, 0x44, 0xf3, 0x03,
	0xef, 0xe6, 0x71, 0xc7, 0x73, 0x7f, 0x42, 0xce, 0x21, 0x34, 0x96, 0x5a, 0xee, 0x75, 0x47, 0x8b,
	0xb8, 0xa6, 0xac, 0xdd, 0x66, 0x5e, 0x9d, 0x65, 0x6f, 0x21, 0xbe, 0x2e, 0xe9, 0x23, 0xd7, 0xf5,
	0x1c, 0x0c, 0xbd, 0xcf, 0xcd, 0x20, 0x07, 0x9d, 0xbd, 0x66, 0x52, 0x5c, 0x69, 0x67, 0x29, 0x44,
	0xcb, 0x52, 0x19, 0xbe, 0xe6, 0xc6, 0x08, 0x25, 0x8f, 0xdd, 0x65, 0x1f, 0x20, 0x5a, 0x73, 0xfd,
	0xc0, 0xf5, 0xfb, 0x1d, 0xa3, 0x96, 0x3b, 0x55, 0xb3, 0xba, 0xac, 0x55, 0xcd, 0xea, 0xd2, 0xa9,
	0x96, 0x8a, 0x36, 0xaa, 0x0e, 0x93, 0xd3, 0xb6, 0xe3, 0xf8, 0x60, 0xd1, 0x31, 0x85, 0xdc, 0xa8,
	0x24, 0xa8, 0xe2, 0x71, 0x38, 0xfb, 0x89, 0x60, 0x5c, 0x0d, 0x58, 0xc9, 0x8d, 0xba, 0xd0, 0xee,
	0xf6, 0x6b, 0x08, 0x4a, 0x61, 0x5c, 0xdc, 0xbd, 0xe9, 0xc9, 0xe2, 0xc5, 0xfc, 0xe8, 0xbc, 0xb5,
	0xce, 0x3d, 0xf1, 0xec, 0x2b, 0x02, 0x78, 0xda, 0xfc, 0x2f, 0xe1, 0xc6, 0x4d, 0xf7, 0xc8, 0x0d,
	0x65, 0x4c, 0x7b, 0x8b, 0xc3, 0xdc, 0x63, 0x72, 0x06, 0x03, 0x5f, 0x83, 0x42, 0x95, 0xde, 0xe5,
	0x30, 0x6f, 0xd6, 0x8e, 0x2f, 0x15, 0xe3, 0x49, 0xe8, 0x75, 0x3d, 0x6e, 0xde, 0xde, 0x7f, 0x7a,
	0xfb, 0xec, 0x0b, 0x82, 0xc1, 0xca, 0x95, 0x6a, 0x79, 0xcf, 0x48, 0x08, 0xa8, 0xc0, 0x1d, 0x12,
	0xc3, 0xd0, 0xd6, 0x7d, 0xc2, 0x8c, 0x60, 0x88, 0x4c, 0x2b, 0x54, 0xcc, 0xc9, 0x18, 0x4e, 0xaa,
	0x1d, 0xff, 0x42, 0xbc, 0x21, 0xcf, 0x20, 0x2e, 0xda, 0xb5, 0xc1, 0x5b, 0x77, 0xab, 0x68, 0x7d,
	0x15, 0xfe, 0xe8, 0x48, 0xd5, 0xad, 0x9a, 0x24, 0x48, 0x04, 0x83, 0x5b, 0x27, 0x71, 0x65, 0xb6,
	0xf8, 0xd3, 0xec, 0x15, 0x9c, 0xb4, 0xea, 0x44, 0x00, 0xfa, 0x55, 0x17, 0x71, 0xc7, 0xe1, 0x2a,
	0x32, 0x8c, 0x66, 0xe7, 0x10, 0xb5, 0x2b, 0x45, 0x86, 0x10, 0xd2, 0x52, 0x3c, 0x70, 0xdc, 0x21,
	0x03, 0x08, 0x18, 0xa7, 0x0c, 0xa3, 0x8b, 0xd3, 0x1f, 0xfb, 0x14, 0xfd, 0xda, 0xa7, 0xe8, 0xf7,
	0x3e, 0x45, 0xdf, 0xfe, 0xa4, 0x9d, 0xbf, 0xdf, 0x5f, 0xa2, 0xdb, 0xbe, 0xcf, 0xe7, 0xcd, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x3c, 0xde, 0xb8, 0x48, 0x03, 0x00, 0x00,
}
